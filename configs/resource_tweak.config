
//
// PROCESSES CUSTOMISED
//

process {

    // EXAMPLE 1: Override all parameters

    withName: 'EXAMPLE_PROCESS_1' {
        cpus = 8
        memory = 50.GB
        queue = 'long'
        time = 48.h

    }

    // EXAMPLE 2: Override some parameters

    withName: 'EXAMPLE_PROCESS_2' {
        memory = 64.GB
        queue = 'basement'
        time = 30.d
    }

    // EXAMPLE 3: Override two processes with the same parameters

    withName: 'EXAMPLE_PROCESS_3|EXAMPLE_PROCESS_4' {
        cpus = 8
        memory = 50.GB
        queue = 'long'
        time = 48.h
    }

    // EXAMPLE 4: Enable memory resource escalation

    withName: 'ASSEMBLY' {
        cpus    = 8
        memory  = { check_max( escalate_exp( 64.GB, task, 2 ), 'memory' ) }
        queue = 'long'
        time    = 48.h

    }
}


//
// REQURED FUNCTIONS FOR ABOVE PROCESS OVERRIDES
//

// 
// FOR OTHER FUNCTIONS PLEASE SEE NEXTFLOW-COMMONS.CONFIG 

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (Exception e) {
            println "ERROR - Could not compare ${obj} to params.max_memory ${params.max_memory}! Printing exception and using process.memory = ${obj}:"
            println "${e.toString()}"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (Exception e) {
            println "ERROR - Could not compare ${obj} to params.max_time ${params.max_time}! Printing exception and using process.time = ${obj}:"
            println "${e.toString()}"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (Exception e) {
            println "ERROR - Could not compare ${obj} to params.max_cpus ${params.max_cpus}! Printing exception and using process.cpus = ${obj}:"
            println "${e.toString()}" 
            return obj
        }
    }
}

def escalate_exp(initial, task, multiplier=1) {
    assert multiplier > 0
    return (initial * (multiplier ** (task.attempt - 1)))
}

def escalate_linear(initial, task, multiplier=1) {
    assert multiplier > 0
    return (initial * multiplier * task.attempt)
}
